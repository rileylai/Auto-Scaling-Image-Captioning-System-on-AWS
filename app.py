# To use on an AWS Linux instance
# #!/bin/bash
# sudo yum install python3-pip -y
# pip install flask
# pip install mysql-connector-python
# pip install -q -U google-generativeai
# pip install boto3 werkzeug
# sudo yum install -y mariadb105

import boto3  # AWS S3 SDK
import mysql.connector  # MySQL database connector
from flask import Flask, request, render_template, jsonify  # Web framework
from werkzeug.utils import secure_filename  # Secure filename handling
# import google.generativeai as genai  # Gemini API for image captioning
import base64  # Encoding image data for API processing
from io import BytesIO  # Handling in-memory file objects

# Flask app setup
app = Flask(__name__)

# AWS S3 Configuration
S3_BUCKET = "image-caption-riley-2025-unique-0520"
S3_REGION = "us-east-1"

def get_s3_client():
    # Returns a new S3 client that automatically refreshes credentials if using an IAM role.
    return boto3.client("s3", region_name=S3_REGION)

# Database Configuration
DB_HOST = "image-caption-db-2025-t3micro-0520.ckst873hcdac.us-east-1.rds.amazonaws.com"
DB_NAME = "image_caption_db"
DB_USER = "admin"
DB_PASSWORD = "rdspwdforriley"

def get_db_connection():
    """
    Establishes a connection to the MySQL RDS database.

    :return: Database connection object or None if connection fails
    """
    try:
        connection =  mysql.connector.connect(
            host=DB_HOST, db=DB_NAME, user=DB_USER, password=DB_PASSWORD
        )
        return connection
    except mysql.connector.Error as err:
        print("Error connecting to database:", err)
        return None

# Allowed file types for upload
ALLOWED_EXTENSIONS = {"png", "jpg", "jpeg", "gif"}
def allowed_file(filename):
    """
    Checks if the uploaded file has a valid extension.

    :param filename: Name of the uploaded file
    :return: True if valid, False otherwise
    """
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route("/")
def upload_form():
    # Render the homepage with the file upload form.
    return render_template("index.html")

@app.route("/upload", methods=["GET", "POST"])
def upload_image():
    if request.method == "POST":
        if "file" not in request.files or request.files["file"].filename == "":
            return render_template("upload.html", error="No file selected")

        file = request.files["file"]
        if not allowed_file(file.filename):
            return render_template("upload.html", error="Invalid file type")

        filename = secure_filename(file.filename)
        file_data = file.read()
        s3_key = f"pictures/{filename}"

        # Check if a file with the same name already exists in S3.
        s3 = get_s3_client()
        try:
            s3.head_object(Bucket=S3_BUCKET, Key=s3_key)
            return render_template("upload.html", error="File already exists in S3.")
        except s3.exceptions.ClientError as e:
            if e.response['Error']['Code'] != '404':
                return render_template("upload.html", error="S3 access error")

        # Upload to S3
        s3.upload_fileobj(BytesIO(file_data), S3_BUCKET, s3_key)

        # Force Lambda to wait for the database write to complete.
        import time
        time.sleep(5)

        # Directly query the image caption from RDS
        caption_text = "Caption is being generated by Lambda..."
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor(dictionary=True)
            cursor.execute("SELECT caption FROM captions WHERE image_key = %s", (s3_key,))
            result = cursor.fetchone()
            connection.close()

            if result and result["caption"]:
                caption_text = result["caption"]

        # Convert the image to base64 and display it on the frontend.
        encoded_image = base64.b64encode(file_data).decode("utf-8")
        return render_template("upload.html", image_data=encoded_image, caption=caption_text)

    return render_template("upload.html")

@app.route("/gallery")
def gallery():
    """
    Retrieves images and their captions from the database,
    generates pre-signed URLs for secure access, and renders the gallery page.
    """
    try:
        connection = get_db_connection()
        if connection is None:
            return render_template("gallery.html", error="Database Error: Unable to connect to the database.")
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT image_key, caption FROM captions ORDER BY uploaded_at DESC")
        results = cursor.fetchall()
        print("Fetched results:", results) # 新加的！！！！
        connection.close()

        images_with_captions = [
            {
                "url": get_s3_client().generate_presigned_url(
                    "get_object",
                    Params={"Bucket": S3_BUCKET, "Key": row["image_key"]},
                    ExpiresIn=3600,  # URL expires in 1 hour
                ),
                "caption": row["caption"],
            }
            for row in results
        ]
        return render_template("gallery.html", images=images_with_captions, error=None)

    except Exception as e:
        import traceback
        return f"<pre>{traceback.format_exc()}</pre>"
        return render_template("gallery.html", error=f"Database Error: {str(e)}")

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)
